output "cluster_name" {
  description = "Name of the Kubernetes cluster"
  value       = var.cloud_provider == "aws" ? aws_eks_cluster.main[0].name : google_container_cluster.main[0].name
}

output "cluster_endpoint" {
  description = "Endpoint of the Kubernetes cluster"
  value       = var.cloud_provider == "aws" ? aws_eks_cluster.main[0].endpoint : google_container_cluster.main[0].endpoint
}

output "cluster_security_group_id" {
  description = "Security group ID of the cluster (AWS only)"
  value       = var.cloud_provider == "aws" ? aws_eks_cluster.main[0].vpc_config[0].cluster_security_group_id : null
}

output "worker_security_group_id" {
  description = "Security group ID for worker nodes"
  value       = var.cloud_provider == "aws" ? aws_eks_cluster.main[0].vpc_config[0].cluster_security_group_id : null
}

output "cluster_certificate_authority_data" {
  description = "Base64 encoded certificate data required to communicate with the cluster"
  value       = var.cloud_provider == "aws" ? aws_eks_cluster.main[0].certificate_authority[0].data : google_container_cluster.main[0].master_auth[0].cluster_ca_certificate
}

output "cluster_token" {
  description = "Token for cluster authentication (GCP only)"
  value       = var.cloud_provider == "gcp" ? google_container_cluster.main[0].master_auth[0].access_token : null
  sensitive   = true
}

output "cluster_arn" {
  description = "ARN of the EKS cluster (AWS only)"
  value       = var.cloud_provider == "aws" ? aws_eks_cluster.main[0].arn : null
}

output "cluster_version" {
  description = "Version of the Kubernetes cluster"
  value       = var.cloud_provider == "aws" ? aws_eks_cluster.main[0].version : google_container_cluster.main[0].master_version
}

output "node_groups" {
  description = "Information about node groups"
  value = var.cloud_provider == "aws" ? {
    for ng in aws_eks_node_group.main : ng.node_group_name => {
      arn           = ng.arn
      status        = ng.status
      capacity_type = ng.capacity_type
      instance_types = ng.instance_types
      scaling_config = ng.scaling_config
    }
  } : {
    for ng in google_container_node_pool.main : ng.name => {
      instance_group_urls = ng.instance_group_urls
      managed_instance_group_urls = ng.managed_instance_group_urls
      initial_node_count = ng.initial_node_count
      autoscaling = ng.autoscaling
    }
  }
}

# Kubeconfig for AWS EKS
output "kubeconfig" {
  description = "kubectl config as generated by the module"
  value = var.cloud_provider == "aws" ? templatefile("${path.module}/kubeconfig.tpl", {
    cluster_name     = aws_eks_cluster.main[0].name
    endpoint         = aws_eks_cluster.main[0].endpoint
    ca_data          = aws_eks_cluster.main[0].certificate_authority[0].data
    aws_region       = var.region
  }) : templatefile("${path.module}/kubeconfig-gcp.tpl", {
    cluster_name     = google_container_cluster.main[0].name
    endpoint         = google_container_cluster.main[0].endpoint
    ca_data          = google_container_cluster.main[0].master_auth[0].cluster_ca_certificate
    gcp_project_id   = var.gcp_project_id
    gcp_region       = var.region
  })
  sensitive = true
}
